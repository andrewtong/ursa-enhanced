v0.3

Corrected the hashmap to handle duplicate letters by resetting the map keys whenever a failed check occurs, which prevents
future indexes from being incorrectly scored.  Fixing this issue allows for letters to be correctly scored and for the hashmap
to accurately recognize the correct positions of letter pairs while preventing duplicate keys from occuring in the map.

Fixed an issue with 'skipped' variable not accounting for the current letter, which prevents the algorithm to correctly 
register the current index.  However, there is a 'gray area' associated with this, since permiting the curent index to 
be registered as the last-seen character makes it easy to 'trick' the algorithm and result in a incorrect index computation
on the subsequent character.  The reason this occurs is that at any given character the algorithm must immediately compute
whether it believes it is part of the substring or not, and because one of the constraints of the project is to solve it in
linear time, there is no easy way to determine whether the current index is actually relevant without scanning adjacent 
letters.  This issue will be looked into more in the future, but the pros of this fix seem to outweigh the cons.

Scoring on the 'correct match' case where there is an index jump has been fixed to be more accurate.  Previously the 
equation was faulty in the sense that it would only register jumps that were of 2 or more indexes.  

Scoring has been slightly adjusted to help with discerning between incorrect words.  The penalty for an incorrect letter/pair
of letters has been slightly bumped up to help the algorithm filter out incorrect words more efficiently.  

Fixed a scoring error associated with consecutive identical letters that was not being correctly registered.

Fixed an error where the 'skipped' variable was not resetting, resulting significant errors for longer strings.

Limited the number of indexes that can be jumped without severe penalty in score.

v0.2 June 5th 2015

URSA-enhanced now supports most error types and performs functionally with minimal bugs.  The predictions have all been done
via lazy evaluatons and hashmap lookups allowing the algorithm to operate in linear time.  Scoring is not perfectly accurate 
at the moment but will likely be fixed in the nearby future.  The source code has been sigificantly updated since the previous
version to account for many more error types including letter swaps, letter corrections, missing indexes, and the handling
of duplicate letters/indexes.  The details behind the hashing equations and how the hashmap operates is found in the 
"computation" markdown file.

The explanation behind the theory of URSA-enhanced is now more detailed in the readme and provides an explanation behind the 
approach of the problem.  


v0.1

This version is the introduction of URSA-enhanced.  The theory behind this project can be found in the readme.md file.  Currently
URSA-enhanced can handle very basic fuzzy string matching cases, and will always run in linear time.  I am very glad to finally
introduce this project as the theory required a significant amount of work to build up to and this project certainly has 
a lot of potential.  

URSA-enhanced will be continually improved to handle many more complex cases.  It is still currently in work, but this version
serves as an introduction to see how the code is layed out and how the estimation processes work.
